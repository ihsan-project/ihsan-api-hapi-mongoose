openapi: 3.0.0
info:
  title: Ihsan Hapi API
  description: |
    ## API Key
    It's good practice to validate a key for all requests. This key isn't encrypted nor a secret, it's only a first line of defense against crawlers. All Ihsan's APIs require the `x-api-key` header to be present.

    ## Authorization
    Ihsan will only support SSO from the client platform (Android, iOS) to maintain security, while reducing the need to manage authorization flows such as verifying emails or encrypting and storing passwords.
    The client application will send the service's SSO information to the Ihsan API as a `UserAuthorization`.
    The response will be a `User` with an `access` property which will need to be set as the `Authorization` header of subsequent API calls.
    If a user has the same email information between SSO services, the system will tie the `UserAuthorization`s to that user, and user will be able to login to same account using both SSO services.

    ## Challenges
    Moderators create `Challenge`s. A challenge has a `book` that contains metadata regarding what type of challenge this is.
    Based on the type of book (quran, dhikr, etc), the `total_parts` will mean something different
    - If `quran` then there will be 30 total_parts for each Juuz.
    - Otherwise the total_parts will be the the total count the moderator wishes to achieve. i.e. 30,000 Kalimahs

    ## Books
    Books are the types of Ihsan challenges that a moderator can create.
    These will be created by Admins and have `slug_id`s so can be identified. These are long-living objects that are going to be referenced by `Challenge`s in a one-to-many relationship.
    One of the first type of `Book`s will be the Quran. Other types of Books would be one for each Dhikr. Books can contain extra information such as the value of the dhikr, and historical or spiritual context.
  version: 1.0.0
servers:
  - url: 'https://ihsanproject.com'
security:
  - ApiKeyAuth: []
  - AccessAuth: []
paths:
  /authorizations:
    post:
      description: |
        # Get a session token for user
        1. If the user exists, will get back `User`
        1. If the user doesn't exist, will create `User` and return it
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthorization'
      responses:
        '200':
          description: A JSON of a user
          content:
            application:json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{user_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type : integer
    get:
      description: Get User
      responses:
        '200':
          description: A JSON of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/profile:
    get:
      description: Get current user for `Authorization` information
      responses:
        '200':
          description: A JSON of a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{user_id}/pushtokens:
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type : integer
    post:
      description: Add push token for user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPushToken'
      responses:
        '201':
          description: Created
  /settings/{version}:
    get:
      description: |
        # Get Settings
        Send `version` of last settings sync to receive back shorter responses for better performance.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: version
          in: path
          required: true
          description: Not really required
          schema:
            type : integer
      responses:
        '204':
          description: No changes according to the requested `version`
        '200':
          description: A JSON of constants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
  /books:
    summary: Book CRUD
    get:
      description: Get Books
      parameters:
        - name: page
          in: path
          required: true
          description: Not really required
          schema:
            type : integer
        - name: limit
          in: path
          required: true
          description: Not really required
          schema:
            type : integer
      responses:
        '200':
          description: A JSON of a book
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
components:
  securitySchemes:
    ApiKeyAuth:
      description: Api Key
      type: apiKey
      in: header
      name: x-api-key
    AccessAuth:
      description: Authorization Token
      type: apiKey
      in: header
      name: Authorization
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        access:
          description: Access key for Ihsan API
          type: string
    UserAuthorization:
      description: Identity objects for various SSO services
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        uuid:
          description: The SSO service's stable unique identifier for the user
          type: string
        email:
          type: string
        digest:
          type: string
          description: |
            The platform SSO digest to validate on the server side.
            - For Android, this is the GoogleSignInAccount.idToken
        platform:
          type: integer
          description: |
            Types:
              - android
              - apple

            For debug instances, pass -1 value to skip digest verifcation
    UserPushToken:
      description: Push Notification token information for a user
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
        platform:
          type: string
          description: apns, gcm
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
    Book:
      description: Religious text
      type: object
      properties:
        id:
          type: integer
        slug_id:
          type: string
        type:
          type: integer
          description: quran, dhikr, salwaat
        title:
          type: string
    Settings:
      description: App Settings
      type: object
      properties:
        version:
          type: integer
          default: 1
